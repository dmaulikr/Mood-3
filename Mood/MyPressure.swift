//
//  MyPressure.swift
//  Moon
//
//  Created by Tung CHENG on 15/9/22.
//  Copyright (c) 2015 CompanyName. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class MyPressure : NSObject {

    //// Drawing Methods

    public class func drawPressureKit(pressure: CGFloat) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let clockColor = UIColor(red: 0.253, green: 0.253, blue: 0.251, alpha: 1.000)
        var clockColorRedComponent: CGFloat = 1,
            clockColorGreenComponent: CGFloat = 1,
            clockColorBlueComponent: CGFloat = 1
        clockColor.getRed(&clockColorRedComponent, green: &clockColorGreenComponent, blue: &clockColorBlueComponent, alpha: nil)

        let backgroundColor = UIColor(red: (clockColorRedComponent * 0.1 + 0.9), green: (clockColorGreenComponent * 0.1 + 0.9), blue: (clockColorBlueComponent * 0.1 + 0.9), alpha: (CGColorGetAlpha(clockColor.CGColor) * 0.1 + 0.9))
        let lowPressureColor = UIColor(red: 0.467, green: 0.876, blue: 0.351, alpha: 1.000)
        let highPressureColor = UIColor(red: 1.000, green: 0.304, blue: 0.410, alpha: 1.000)
        let baseColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Variable Declarations
        let angle: CGFloat = -240 * pressure
        let limitingColor = pressure > 0.7 ? highPressureColor : lowPressureColor

        //// Border Oval Drawing
        let borderOvalPath = UIBezierPath(ovalInRect: CGRectMake(19.72, 105, 357, 357))
        baseColor.setFill()
        borderOvalPath.fill()
        clockColor.setStroke()
        borderOvalPath.lineWidth = 8
        borderOvalPath.stroke()


        //// Dock Drawing
        let dockPath = UIBezierPath()
        dockPath.moveToPoint(CGPointMake(132.72, 411.51))
        dockPath.addCurveToPoint(CGPointMake(197.91, 436), controlPoint1: CGPointMake(151.95, 427.1), controlPoint2: CGPointMake(174.2, 436))
        dockPath.addCurveToPoint(CGPointMake(264.72, 410.17), controlPoint1: CGPointMake(222.29, 436), controlPoint2: CGPointMake(245.13, 426.59))
        dockPath.addLineToPoint(CGPointMake(254.84, 387))
        dockPath.addCurveToPoint(CGPointMake(197.91, 408.9), controlPoint1: CGPointMake(238.13, 400.92), controlPoint2: CGPointMake(218.67, 408.9))
        dockPath.addCurveToPoint(CGPointMake(143, 388.64), controlPoint1: CGPointMake(177.98, 408.9), controlPoint2: CGPointMake(159.25, 401.54))
        dockPath.addLineToPoint(CGPointMake(132.72, 411.51))
        dockPath.closePath()
        limitingColor.setFill()
        dockPath.fill()
        clockColor.setStroke()
        dockPath.lineWidth = 8
        dockPath.stroke()


        //// Board Drawing
        let boardPath = UIBezierPath()
        boardPath.moveToPoint(CGPointMake(329.72, 365))
        boardPath.addCurveToPoint(CGPointMake(350.72, 283.5), controlPoint1: CGPointMake(347.17, 340.2), controlPoint2: CGPointMake(350.72, 316.13))
        boardPath.addCurveToPoint(CGPointMake(198.22, 131), controlPoint1: CGPointMake(350.72, 199.28), controlPoint2: CGPointMake(282.45, 131))
        boardPath.addCurveToPoint(CGPointMake(45.72, 283.5), controlPoint1: CGPointMake(114, 131), controlPoint2: CGPointMake(45.72, 199.28))
        boardPath.addCurveToPoint(CGPointMake(70.98, 367.58), controlPoint1: CGPointMake(45.72, 314.57), controlPoint2: CGPointMake(55.02, 343.48))
        boardPath.addLineToPoint(CGPointMake(110.72, 343))
        boardPath.addCurveToPoint(CGPointMake(89.72, 283.5), controlPoint1: CGPointMake(97.07, 324.85), controlPoint2: CGPointMake(89.72, 307.96))
        boardPath.addCurveToPoint(CGPointMake(198.22, 175), controlPoint1: CGPointMake(89.72, 223.58), controlPoint2: CGPointMake(138.3, 175))
        boardPath.addCurveToPoint(CGPointMake(306.72, 283.5), controlPoint1: CGPointMake(258.15, 175), controlPoint2: CGPointMake(306.72, 223.58))
        boardPath.addCurveToPoint(CGPointMake(286.72, 343), controlPoint1: CGPointMake(306.72, 307.7), controlPoint2: CGPointMake(300.12, 324.95))
        boardPath.addLineToPoint(CGPointMake(329.72, 365))
        boardPath.closePath()
        backgroundColor.setFill()
        boardPath.fill()
        clockColor.setStroke()
        boardPath.lineWidth = 8
        boardPath.stroke()


        //// Rule Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 189.22, 263.16)
        CGContextRotateCTM(context, -20.76 * CGFloat(M_PI) / 180)

        let rulePath = UIBezierPath()
        rulePath.moveToPoint(CGPointMake(108.02, 115.18))
        rulePath.addCurveToPoint(CGPointMake(138.37, 0.96), controlPoint1: CGPointMake(133.5, 84.53), controlPoint2: CGPointMake(145.83, 43.29))
        rulePath.addCurveToPoint(CGPointMake(-24.38, -113.03), controlPoint1: CGPointMake(124.9, -75.46), controlPoint2: CGPointMake(52.04, -126.49))
        rulePath.addCurveToPoint(CGPointMake(-140.3, 33.09), controlPoint1: CGPointMake(-95.23, -100.54), controlPoint2: CGPointMake(-144.26, -37.01))
        rulePath.addCurveToPoint(CGPointMake(-138.37, 49.72), controlPoint1: CGPointMake(-139.99, 38.6), controlPoint2: CGPointMake(-139.35, 44.15))
        clockColor.setStroke()
        rulePath.lineWidth = 25
        CGContextSaveGState(context)
        CGContextSetLineDash(context, 42, [8, 53], 2)
        rulePath.stroke()
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)


        //// Arrow Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 198.62, 288.25)
        CGContextRotateCTM(context, -(angle + 120) * CGFloat(M_PI) / 180)

        let arrowPath = UIBezierPath()
        arrowPath.moveToPoint(CGPointMake(14.11, 54.75))
        arrowPath.addLineToPoint(CGPointMake(14.11, 19.75))
        arrowPath.addLineToPoint(CGPointMake(10.37, 8.57))
        arrowPath.addLineToPoint(CGPointMake(11.11, -121.43))
        arrowPath.addLineToPoint(CGPointMake(-0.37, -133.25))
        arrowPath.addLineToPoint(CGPointMake(-10.89, -121.43))
        arrowPath.addLineToPoint(CGPointMake(-10.89, 8.75))
        arrowPath.addLineToPoint(CGPointMake(-14.89, 21.75))
        arrowPath.addLineToPoint(CGPointMake(-14.89, 54.75))
        arrowPath.addLineToPoint(CGPointMake(14.11, 54.75))
        arrowPath.closePath()
        UIColor.grayColor().setFill()
        arrowPath.fill()
        clockColor.setStroke()
        arrowPath.lineWidth = 8
        arrowPath.stroke()

        CGContextRestoreGState(context)


        //// Center Oval Drawing
        let centerOvalPath = UIBezierPath(ovalInRect: CGRectMake(175.72, 266, 45, 45))
        backgroundColor.setFill()
        centerOvalPath.fill()
        clockColor.setStroke()
        centerOvalPath.lineWidth = 8
        centerOvalPath.stroke()


        //// Limit Oval Drawing
        let limitOvalPath = UIBezierPath(ovalInRect: CGRectMake(322.72, 175, 10, 10))
        backgroundColor.setFill()
        limitOvalPath.fill()
        clockColor.setStroke()
        limitOvalPath.lineWidth = 6
        limitOvalPath.stroke()
    }

}

@objc protocol StyleKitSettableImage {
    func setImage(image: UIImage!)
}

@objc protocol StyleKitSettableSelectedImage {
    func setSelectedImage(image: UIImage!)
}
